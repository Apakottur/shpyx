# Enable everything by default.
select = ["ALL"]
ignore = [
    ###################################################
    # Ignored - we rely on `black` to format our code #
    ###################################################
    "COM812", # Trailing comma missing
    "E501", # Line too long
    ##############
    # Pydocstyle #
    ##############
    # See: http://www.pydocstyle.org/en/stable/error_codes.html
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__
    "D200", # One-line docstring should fit on one line with quotes
    "D203", # 1 blank line required before class docstring
    "D205", # 1 blank line required between summary line and description
    "D212", # Multi-line docstring summary should start at the first line
    "D400", # First line should end with a period
    "D401", # First line should be in imperative mood; try rephrasing
    "D406", # Section name should end with a newline
    "D407", # Missing dashed underline after section
    "D415", # First line should end with a period, question mark, or exclamation point
    ###################################
    # Other checks that we don't want #
    ###################################
    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "BLE001", # Do not catch blind exception: `Exception`
    "C901", # Method is too complex
    "EM101", # Exception must not use a string literal, assign to variable first
    "EM102", # Exception must not use an f-string literal, assign to variable first
    "ERA001", # Found commented-out code
    "FIX002", # Line contains TODO
    "G004", # Logging statement uses f-string
    "N818", # Exception name should be named with an Error suffix
    "PD011", # Use `.to_numpy()` instead of `.values`
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments to function call
    "PLR0915", # Too many statements
    "PLR1722", # Use `sys.exit()` instead of `exit`
    "PLR2004", # Magic value used in comparison, consider replacing with a constant variable
    "PLR5501", # Consider using `elif` instead of `else` then `if` to remove one indentation level
    "PTH123", # `open()` should be replaced by `Path.open()`
    "RET505", # Unnecessary `else` after `return` statement
    "RET506", # Unnecessary `else` after `raise` statement
    "S104", # Possible binding to all interfaces
    "S105", # Possible hardcoded password
    "SIM102", # Use a single `if` statement instead of nested `if` statements
    "SIM105", # Use `contextlib.suppress()` instead of try-except-pass
    "SIM114", # Combine `if` branches using logical `or` operator
    "TCH001", # Move application import into a type-checking block
    "TCH002", # Move third-party import into a type-checking block
    "TCH003", # Move standard library import into a type-checking block
    "TD002", # Missing author in TODO
    "TD003", # Missing issue link on the line following this TODO
    "TD005", # Missing issue description after `TODO`
    "TRY003", # Avoid specifying long messages outside the exception class
]

# Fixing configuration.
fix = true
fixable = ["ALL"]
unfixable = []

# Import sorting configuration.
isort = { combine-as-imports = true }

# Maximum line length.
line-length = 120

# Python version.
target-version = "py37"

[pydocstyle]
# Use Google-style docstrings.
convention = "google"

[pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["classmethod", "pydantic.validator"]

[flake8-builtins]
# Ignore list of builtin names.
builtins-ignorelist = ["id"]

# Per file ignores.
[per-file-ignores]
"test_*" = [
    "S101", # Use of `assert` detected
]
